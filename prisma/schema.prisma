// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum StaffRole {
    Admin
    Cashier
    Waiter
    KitchenManager
}

model StaffMember {
    id Int @id @default(autoincrement())

    username     String @unique
    passwordHash String

    name String

    role                StaffRole
    activities          StaffActivityLog[]
    assignedDiningAreas WaiterAssignment[]
}

model StaffActivityLog {
    id Int @id @default(autoincrement())

    staffMemberId Int
    staffMember   StaffMember @relation(fields: [staffMemberId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    activity String

    createdAt DateTime @default(now())
}

model Customer {
    id Int @id @default(autoincrement())

    name  String
    phone String @unique

    loyaltyPoints Int @default(0)

    createdAt DateTime @default(now())
}

enum OrderStatusType {
    New
    InProgress
    Completed
    Rejected
}

model Order {
    id Int @id @default(autoincrement())

    orderCode String

    status OrderStatusType @default(New)

    createdAt DateTime @default(now())
}

model DiningArea {
    id Int @id @default(autoincrement())

    name        String @unique
    description String

    diningTables    DiningTable[]
    assignedWaiters WaiterAssignment[]
}

model DiningTable {
    id Int @id @default(autoincrement())

    name         String
    diningAreaId Int
    isReservable Boolean @default(true)
    maxSeats     Int

    diningArea DiningArea @relation(fields: [diningAreaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([name, diningAreaId])
}

model WaiterAssignment {
    id Int @id @default(autoincrement())

    diningAreaId Int
    diningArea   DiningArea @relation(fields: [diningAreaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    waiterId Int
    waiter   StaffMember @relation(fields: [waiterId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    assignedAt DateTime @default(now())

    @@unique([diningAreaId, waiterId])
}
